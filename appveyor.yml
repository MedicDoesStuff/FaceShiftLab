# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: '{branch}-{build}'

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master

  # blacklist
#  except:
#    - gh-pages

# Do not build on tags (GitHub, Bitbucket, GitLab, Gitea)
#skip_tags: true

# Start builds on tags only (GitHub, BitBucket, GitLab, Gitea)
skip_non_tags: true

# Skipping commits with particular message or from specific user
#skip_commits:
#  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/      # Regex for matching commit message
#  author: John                                      # Commit author's username, name, email or regexp maching one of these.

# Including commits with particular message or from specific user
#only_commits:
#  message: /build/                # Start a new build if message contains 'build'
#  author: jack@company.com        # Start a new build for commit of user with email jack@company.com

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
#max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
#image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
#init:
#  - git config --global core.autocrlf input

# clone directory
#clone_folder: c:\projects\myproject

# fetch repository as zip archive
#shallow_clone: true                 # default is "false"

# set clone depth
#clone_depth: 5                      # clone entire repository history if not defined

# setting up etc\hosts file
#hosts:
#  queue-server: 127.0.0.1
#  db.server.com: 127.0.0.2

environment:
  global:
    FOLDER_ID: 17a9b9zmLdnAlItifcGSE9ixDIDAT3YxP
    PYTHON: "C:\\Python36-x64"
    API_KEY:
      secure: 8U1B5tGEhLct8ToXWw3mPFD7OP4WcqurPcxZYfWdRud0VIH/n32RauGG5p7ncTdH

  matrix:
    - ARCH: "OpenCLSSE"
    - ARCH: "CUDA9.2SSE"
    - ARCH: "CUDA10.1SSE"
    - ARCH: "CUDA10.1AVX"

## build cache to preserve files/folders between builds
#cache:
#  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
#  - projectA\libs
#  - node_modules                    # local npm modules
#  - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
#  - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

install:
  - cmd: SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%"
  - cmd: For /f "tokens=2-4 delims=/ " %%a in ('date /t') do (set mydate=%%c-%%a-%%b)
  - cmd: set ARCHIVE_NAME=DeepFaceLab-%ARCH%-%APPVEYOR_REPO_TAG_NAME%-%mydate%
  - cmd: echo %ARCHIVE_NAME%
  - ps: python --version
  - ps: python -m pip install --upgrade pip
  - ps: python -m pip install -r appveyor/requirements.txt
  - cmd: cd ..
  - cmd: python deepfacelab\appveyor\gdrive.py %ARCH% > Output
  - cmd: set /p URL=<Output
  - ps: wget "$env:URL" -OutFile prebuilt.zip
  - cmd: 7z x prebuilt.zip -y > nul
  #- cmd: dir
  #- cmd: dir .\deepfacelab
  #- cmd: dir .\DeepFaceLab%ARCH%\_internal\DeepFaceLab
  - cmd: rmdir /q/ s .\DeepFaceLab%ARCH%\_internal\DeepFaceLab
  - cmd: xcopy .\deepfacelab .\DeepFaceLab%ARCH%\_internal\DeepFaceLab\ /Y /O /X /E /H /K
  - cmd: call .\DeepFaceLab%ARCH%\_internal\setenv.bat
  - cmd: python -m pip install Flask==1.1.1
  - cmd: python -m pip install flask-socketio==4.2.1
  - cmd: python -m pip install ".\DeepFaceLab%ARCH%\_internal\DeepFaceLab\bin\eos_py-1.1.2-cp36-cp36m-win_amd64.whl"
  #- cmd: dir .\DeepFaceLab%ARCH%\_internal
  #- cmd: dir .\DeepFaceLab%ARCH%\_internal\DeepFaceLab
  - cmd: dir .\DeepFaceLab%ARCH%\_internal\python-3.6.8\Lib\site-packages
  - cmd: 7z a .\deepfacelab\%ARCHIVE_NAME%.7z -tzip -mx=1 -r DeepFaceLab%ARCH%\
  - cmd: dir

#---------------------------------#
#       build configuration       #
#---------------------------------#

build: false

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test_script:
#  # Put your test command here.
#  - test

#after_test:
#  after test

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
  - path: .\%ARCHIVE_NAME%.7z

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:
#  # Deploy to GitHub Releases
#  - provider: GitHub
#    release: $(APPVEYOR_REPO_TAG_NAME)
#    artifact: /DeepFakeLab*\.7z/    # upload all 7z packages to release assets
#    draft: true
#    prerelease: true
#    tag: $(APPVEYOR_REPO_TAG_NAME)
#    auth_token:
#      secure: oH1rf7ZUCbvcYC3UaeGekJbGThHNOcmSX0yqcpInEdFwfLMvENSlv0+t3vGkR4P2
#    on:
#      branch: master                # release from master branch only
#      APPVEYOR_REPO_TAG: true       # deploy on tag push only
